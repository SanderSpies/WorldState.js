/**
 * Generated by worldstate.js.
 */
'use strict';

var ImmutableGraphArray = require('worldstate/src/Base/ImmutableGraphArray');

{RequireBlock}


/**
 * {GraphName}
 *
 * @constructor
 * @lends {GraphName}
 * @param {{GraphChangeValueDoc}} obj JSON input data
 */
var {GraphName} = function {GraphName}(obj) {
  this.__private.graph = new ImmutableGraphArray(obj);
};

{GraphName}.prototype = {
  /**
   * @private
   * @struct
   */
  __private: {
    graph: null,
    wrappers: null
  },

{GraphMethods}
  /**
   * Enable versioning
   */
  enableVersioning: function {GraphName}$enableVersioning() {
    this.__private.graph.enableVersioning();
  },

  /**
   * Save a version (versioning must be enabled)
   *
   * @param {string} name name of the version
   */
  saveVersion: function {GraphName}$saveVersion(name) {
    this.__private.graph.saveVersion(name);
  },

  /**
   * Restore a version
   *
   * @param {string} name name of the version
   */
  restoreVersion: function {GraphName}$restoreVersion(name) {
    this.__private.graph.restoreVersion(name);
  },

  /**
   * Get all the versions
   *
   * @return {[{name:string, ref:object}]}
   */
  getVersions: function {GraphName}$getVersions() {
    return this.__private.graph.historyRefs;
  },

  /**
   * Change reference
   *
   * @param {{GraphChangeValueDoc}} obj
   */
  changeReferenceTo: function {GraphName}$changeReferenceTo(obj) {
    this.__private.graph.changeReferenceTo(obj);
  },

  /**
   * Change value
   *
   * @param {{GraphInsertDoc}} val
   */
  changeValueTo: function {GraphName}$changeValueTo(val) {
    this.__private.graph.changeValueTo(val);
  },

  /**
   * Get the actual immutable object
   *
   * @return {[]}
   */
  read: function {GraphName}$read() {
    return this.__private.graph.__private.refToObj.ref;
  },

  /**
   * Get items that have the given conditions
   *
   * @param {Object.<*, *>} conditions
   * @return {[{GraphInsertDoc}]}
   */
  where: function {GraphName}$where(conditions) {
    return this.__private.graph.where(conditions);
  },

  /**
   * Get item at given position
   *
   * @param {number} position
   * @return {GraphInsertDoc}
   */
  at: function {GraphName}$at(position) {
    return this.__private.graph.at(position);
  },

  /**
   * Insert item
   *
   * @param {GraphInsertDoc} item
   */
  insert: function {GraphName}$insert(item) {
    var realItem = item.__private.refToObj.ref;
    this.__private.graph.insert(realItem);
  },

  /**
   * Insert multiple items. Items with the same id property get replaced
   * with the new version.
   *
   * @param {[{GraphInsertDoc}]} items
   */
  insertMulti: function {GraphName}$insertMulti(items) {
    this.__private.graph.insertMulti(items);
  }
};

module.exports = {GraphName};
