/**
 * Generated by worldstate.js
 */
'use strict';

var ImmutableGraphObject = require('worldstate/src/Base/ImmutableGraphObject');

{RequireBlock}

/* @type {number} */
var objectPoolSize = 0;


/**
 * A factory for {{GraphName}}
 *
 * @lends {{GraphName}}
 */
var {GraphName}Factory = {
  /**
   * @param {{GraphChangeValueDoc}} obj JSON input data
   * @return {{GraphName}Prototype}
   */
  newInstance: function {GraphName}$newInstance(obj) {

    /**
     * {GraphName}
     *
     * @constructor
     * @param {{GraphChangeValueDoc}} obj JSON input data
     */
    var {GraphName}Class = function {GraphName}(obj) {
      this.__private.graph = new ImmutableGraphObject(obj);
    };
    {GraphName}Class.prototype = {GraphName}Prototype;
    return new {GraphName}Class(obj);
  },

  /**
   * size {number} size of the object pool
   */
  setObjectPoolSize: function(size) {
    objectPoolSize = size;
  }
};


/**
 * @lends {{GraphName}Prototype}
 */
var {GraphName}Prototype = {
  /**
   * @private
   * @struct
   */
  __private: {
    graph: null,
    wrappers: null
  },

{GraphMethods}
  /**
   * Enable versioning
   * @this {{GraphName}Prototype}
   */
  enableVersioning: function {GraphName}$enableVersioning() {
    this.__private.graph.enableVersioning();
  },

  /**
   * Save a version (versioning must be enabled)
   *
   * @param {string} name name of the version
   * @this {{GraphName}Prototype}
   */
  saveVersion: function {GraphName}$saveVersion(name) {
    this.__private.graph.saveVersion(name);
  },

  /**
   * Restore a version
   *
   * @param {{name:string, ref:object}} version version to restore
   * @this {{GraphName}Prototype}
   */
  restoreVersion: function {GraphName}$restoreVersion(version) {
    this.__private.graph.restoreVersion(version);
  },

  /**
   * Get all the versions
   *
   * @return {[{name:string, ref:object}]}
   * @this {{GraphName}Prototype}
   */
  getVersions: function {GraphName}$getVersions() {
    return this.__private.graph.historyRefs;
  },

  /**
   * Change reference
   *
   * @param {{GraphChangeValueDoc}} obj
   * @this {{GraphName}Prototype}
   */
  changeReferenceTo: function {GraphName}$changeReferenceTo(obj) {
    this.__private.graph.changeReferenceTo(obj);
  },

  /**
   * Change value
   *
   * @param {{GraphChangeValueDoc}} val
   * @this {{GraphName}Prototype}
   */
  changeValueTo: function {GraphName}$changeValueTo(val) {
    this.__private.graph.changeValueTo(val);
  },

  /**
   * Get the actual immutable object
   *
   * @return {{GraphReadDoc}}
   * @this {{GraphName}Prototype}
   */
  read: function {GraphName}$read() {
    return this.__private.graph.__private.refToObj.ref;
  }
};

module.exports = {GraphName}Factory;
