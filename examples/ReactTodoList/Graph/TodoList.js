/**
 * Generated by worldstate.js
 */
'use strict';

var ImmutableGraphObject = require('worldstate/src/Base/ImmutableGraphObject');
var ImmutableGraphRegistry =
    require('worldstate/src/Base/ImmutableGraphRegistry');

/* @type Items */
var Items = require('./Items');

/**
 * A factory for {TodoList}
 *
 * @lends {TodoList}
 */
var TodoListFactory = {
  /**
   * @param {[{items:Array,filter:number}]} obj JSON input data
   * @param {{}} parent
   * @param {string} parentKey
   * @return {TodoListPrototype}
   */
  newInstance: function TodoList$newInstance(obj, parent, parentKey) {

    /**
     * TodoList
     *
     * @constructor
     * @param {[{items:Array,filter:number}]} obj JSON input data
     */
    var TodoListClass = function TodoListClass(obj, parent, parentKey) {
      this.__private = {
        graph: null,
        wrappers: {}
      };
      this.__private.graph = ImmutableGraphRegistry.getImmutableObject(obj, parent, parentKey);
    };
    TodoListClass.prototype = TodoListPrototype;
    var instance = new TodoListClass(obj, parent, parentKey);
    return instance;
  }
};


/**
 * @lends {TodoListPrototype}
 */
var TodoListPrototype = {
  /**
   * @private
   * @struct
   */
  __private: {
    graph: null,
    wrappers: {}
  },

    /**
   * Change reference
   *
   * @param {[{items:Array,filter:number}]} obj
   * @this {TodoListPrototype}
   * @return {TodoListPrototype}
   */
  changeReferenceTo: function TodoList$changeReferenceTo(obj) {
    this.__private.graph.changeReferenceTo(obj);
    return this;
  },

  /**
   * Change value
   *
   * @param {[{items:Array,filter:number}]} val
   * @this {TodoListPrototype}
   * @return {TodoListPrototype}
   */
  changeValueTo: function TodoList$changeValueTo(val) {
    this.__private.graph.changeValueTo(val);
    return this;
  },

  /**
   * Enable versioning
   *
   * @this {TodoListPrototype}
   * @return {TodoListPrototype}
   */
  enableVersioning: function TodoList$enableVersioning() {
    this.__private.graph.enableVersioning();
    return this;
  },

  /**
   * Get all the versions
   *
   * @return {[{name:string, ref:object}]}
   * @this {TodoListPrototype}
   */
  getVersions: function TodoList$getVersions() {
    return this.__private.graph.getVersions();
  },

  /**
   * Get the actual immutable object
   *
   * @return {{filter:number}}
   * @this {TodoListPrototype}
   */
  read: function TodoList$read() {
    if (!this.__private.graph.__private.refToObj) {
      return null;
    }
    return this.__private.graph.__private.refToObj.ref;
  },

  /**
   * Restore a version
   *
   * @param {{name:string, ref:object}} version version to restore
   * @this {TodoListPrototype}
   * @return {TodoListPrototype}
   */
  restoreVersion: function TodoList$restoreVersion(version) {
    this.__private.graph.restoreVersion(version);
    return this;
  },

  /**
   * Save a version (versioning must be enabled).
   *
   * @param {string} name name of the version
   * @param {boolean} delayedExecution
   * @this {TodoListPrototype}
   * @return {TodoListPrototype}
   */
  saveVersionAs: function TodoList$saveVersionAs(name, delayedExecution) {
    this.__private.graph.saveVersion(name, delayedExecution);
    return this;
  },

  /**
   * Executes after the current actions, like insert and
   * changeValueTo, have completed
   *
   * @param {function} fn
   * @param {boolean} once
   * @this {TodoListPrototype}
   */
  afterChange: function TodoList$afterChange(fn, once) {
    this.__private.graph.afterChange(fn, once);
  },

  /**
   * Remove this part of the graph
   *
   * @this {TodoListPrototype}
   * @return {TodoListPrototype}
   */
  remove: function TodoList$remove() {
    this.__private.graph.remove();
    return this;
  },

  /**
   * Get the WorldState.js generated id
   *
   * @return {number}
   */
  generatedId: function TodoList$generatedId() {
    return this.__private.graph.generatedId();
  },

  /**
   * Change one or more properties at once
   *
   * @param {{}} newProperties
   * @return {TodoListPrototype}
   */
  changePropertiesTo: function TodoList$changePropertiesTo(newProperties) {
    this.__private.graph.changePropertiesTo(newProperties);
    return this;
  },

  /**
   * Add a change listener
   *
   * @param {function} fn
   * @param {{}} context
   */
  addChangeListener: function TodoList$addChangeListener(fn, context) {
    this.__private.graph.addChangeListener(fn, context);
  },

  /**
   * @this {TodoList}
   * @return {ItemsPrototype}
   */
  items: function TodoList$items() {
    var __private = this.__private;
    var __graphPrivate = __private.graph.__private;
    var wrappers = __private.wrappers;
    if (!wrappers.items) {
      var items = __graphPrivate.refToObj.ref.items.ref;
      wrappers.items = Items.newInstance(items, __private.graph, 'items');
    }
    return wrappers.items;
  }

};

module.exports = TodoListFactory;
